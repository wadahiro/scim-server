name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-basic:
    name: Test Suite (Basic)
    strategy:
      matrix:
        rust: [stable, beta]
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        if: matrix.rust == 'stable'
        run: cargo fmt --all -- --check

      - name: Run clippy
        if: matrix.rust == 'stable'
        run: cargo clippy --all-targets --all-features -- -W clippy::all

      - name: Run tests (SQLite only)
        run: cargo test

      - name: Run doc tests
        if: matrix.rust == 'stable'
        run: cargo test --doc

  test-postgres:
    name: Test Suite (PostgreSQL with TestContainers)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker
        run: |
          # Ensure Docker daemon is running
          sudo systemctl start docker
          docker --version
          docker info
          
          # Pre-pull PostgreSQL image to speed up tests
          docker pull postgres:15-alpine

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ubuntu-postgres-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ubuntu-postgres-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ubuntu-postgres-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests with TestContainers
        run: cargo test --all-features
        env:
          # TestContainers configuration
          TESTCONTAINERS_RYUK_DISABLED: true
          TESTCONTAINERS_COMMAND_TIMEOUT: 180
          RUST_LOG: info
          # Ensure Docker socket access
          DOCKER_HOST: unix:///var/run/docker.sock
        timeout-minutes: 30

      - name: Cleanup Docker containers
        if: always()
        run: |
          # Clean up any remaining containers
          docker ps -aq | xargs -r docker rm -f || true
          docker system prune -f || true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker
        run: |
          sudo systemctl start docker
          docker pull postgres:15-alpine

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate code coverage
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        env:
          TESTCONTAINERS_RYUK_DISABLED: true
          TESTCONTAINERS_COMMAND_TIMEOUT: 180
          RUST_LOG: warn
        timeout-minutes: 20

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: lcov.info
          fail_ci_if_error: false  # Don't fail CI if Codecov fails

      - name: Cleanup Docker containers
        if: always()
        run: |
          docker ps -aq | xargs -r docker rm -f || true

  build-check:
    name: Build Check
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross

      - name: Check build
        run: |
          cross check --target ${{ matrix.target }}

