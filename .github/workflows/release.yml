name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-license
        run: cargo install cargo-license

      - name: Create Release
        uses: taiki-e/create-gh-release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          title: ${{ steps.version.outputs.version }}

      - name: Generate license information
        run: |
          # Generate detailed license information
          cargo license --json > licenses.json
          
          # Create THIRD-PARTY-LICENSES file
          cat > THIRD-PARTY-LICENSES << 'EOF'
          # Third-Party Licenses
          
          This file contains the licenses of third-party dependencies used in this project.
          Generated at release time for version ${{ steps.version.outputs.version }}.
          
          ## Summary of License Types
          
          EOF
          
          # Add license summary
          cargo license | grep -E "^[A-Z]" | sort | uniq -c | sort -rn >> THIRD-PARTY-LICENSES
          
          echo "" >> THIRD-PARTY-LICENSES
          echo "## Detailed License Information" >> THIRD-PARTY-LICENSES
          echo "" >> THIRD-PARTY-LICENSES
          echo "To regenerate this list, run:" >> THIRD-PARTY-LICENSES
          echo "\`\`\`bash" >> THIRD-PARTY-LICENSES
          echo "cargo license" >> THIRD-PARTY-LICENSES
          echo "\`\`\`" >> THIRD-PARTY-LICENSES
          echo "" >> THIRD-PARTY-LICENSES
          echo "## Full Dependency List" >> THIRD-PARTY-LICENSES
          echo "" >> THIRD-PARTY-LICENSES
          echo "\`\`\`" >> THIRD-PARTY-LICENSES
          cargo license >> THIRD-PARTY-LICENSES
          echo "\`\`\`" >> THIRD-PARTY-LICENSES
          echo "" >> THIRD-PARTY-LICENSES
          echo "Last updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> THIRD-PARTY-LICENSES

      - name: Package and upload license information
        run: |
          # Create a licenses archive
          mkdir -p licenses
          mv THIRD-PARTY-LICENSES licenses/
          mv licenses.json licenses/
          tar czf licenses-${{ steps.version.outputs.version }}.tar.gz licenses/
          
          # Upload to release
          gh release upload ${{ steps.version.outputs.version }} licenses-${{ steps.version.outputs.version }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-binaries:
    name: Build Binaries
    needs: create-release
    strategy:
      matrix:
        include:
          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.target }}
        shell: bash

      - name: Upload binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: scim-server
          target: ${{ matrix.target }}
          tar: all
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    name: Publish Release
    needs: [create-release, build-binaries]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Publish release
        run: |
          gh release edit ${{ needs.create-release.outputs.version }} --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}